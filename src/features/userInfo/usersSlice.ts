import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from 'app/store';
import { IUser } from 'interfaces';

interface IUsersState {
  users: IUser[];
  user: IUser;
}

export const emptyUser = {
  userId: 0,
  userName: '',
  userRole: '',
  userEmail: '',
  userPass: '',
  shifts: [],
};

const initialState: IUsersState = {
  users: [],
  user: emptyUser,
};

// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const usersSlice = createSlice({
  name: 'loginForm',
  initialState,
  reducers: {
    getUser: (state, action) => {
      state.users = [...state.users, action.payload];
    },
    addUser: (state, action) => {
      state.users = [...state.users, action.payload];
    },
    setCurrentUser: (state, action) => {
      state.user = action.payload;
    },
    logOutUser: (state) => {
      state.user = emptyUser;
    },
    deleteUser: (state, action) => {
      state.users = state.users.filter(
        (user: IUser) => user.userId !== action.payload
      );
      state.user = emptyUser;
      localStorage.removeItem('currentuser');
    },
    checkExistedUser: (state, actiom) => {},
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const {
  addUser,
  setCurrentUser,
  logOutUser,
  deleteUser,
  checkExistedUser,
} = usersSlice.actions;

export const selectUsers = (state: RootState) => state.users;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default usersSlice.reducer;
